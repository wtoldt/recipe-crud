{"version":3,"sources":["components/Navbar/Navbar.js","components/RecipeList/RecipeListHeader/RecipeListHeader.js","components/RecipeList/RecipeList.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","RecipeListHeader","count","isLoading","onRefresh","onClick","RecipeList","recipes","length","map","recipe","index","name","App","state","a","Axios","get","data","console","error","this","setState","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sWAaeA,MATf,WACE,OACE,yBAAQC,UAAU,SAAlB,UACE,sBAAMA,UAAU,OAAhB,0BACA,6C,MCJS,SAASC,EAAT,GAA4D,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,UAC3D,OACE,sBAAKJ,UAAU,qBAAf,UACE,qBAAKA,UAAU,OAAf,SAAuBG,EAAY,aAAH,UAAqBD,EAArB,cAChC,qBAAKF,UAAU,QAAf,SACE,wBAAQK,QAASD,EAAjB,+B,MCJO,SAASE,EAAT,GAA4C,IAAtBH,EAAqB,EAArBA,UAAWI,EAAU,EAAVA,QAE9C,OACE,sBAAKP,UAAU,cAAf,UACE,cAAC,EAAD,CAAkBG,UAAWA,EAAWD,MAAOK,EAAQC,SACvD,oBAAIR,UAAU,OAAd,SACGO,EAAQE,KAAI,SAACC,EAAQC,GAAT,OACX,6BAAiBD,EAAOE,MAAfD,W,UCNEE,E,4MACnBC,MAAQ,CACNX,WAAW,EACXI,QAAS,I,8FAGX,gCAAAQ,EAAA,6DACMR,EAAU,GADhB,kBAG2BS,IAAMC,IAAI,iBAHrC,gBAGYC,EAHZ,EAGYA,KACRX,EAAUW,EAAKX,QAJnB,gDAMIY,QAAQC,MAAM,0BAAd,MANJ,QAQEC,KAAKC,SAAS,CAAEnB,WAAW,EAAOI,YARpC,yD,0EAWA,WACE,MAA+Bc,KAAKP,MAA5BX,EAAR,EAAQA,UAAWI,EAAnB,EAAmBA,QACnB,OACE,sBAAKP,UAAU,mBAAf,UACE,cAAC,EAAD,IACA,sBAAKA,UAAU,eAAf,UACE,yCACA,oEACA,cAAC,EAAD,CAAYG,UAAWA,EAAWI,QAASA,c,GAzBpBgB,aCMlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e4b1dd4a.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Navbar.scss';\n\nfunction Navbar() {\n  return (\n    <header className=\"navbar\">\n      <span className=\"icon\">üçï</span>\n      <h1>Recipes</h1>\n    </header>\n  );\n}\n\nexport default Navbar;","import React from 'react';\n\nimport './RecipeListHeader.scss';\n\nexport default function RecipeListHeader({ count, isLoading, onRefresh }) {\n  return (\n    <div className=\"recipe-list-header\">\n      <div className=\"left\">{isLoading ? 'loading...' : `${count} recipes`}</div>\n      <div className=\"right\">\n        <button onClick={onRefresh}>üîÉ</button>\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport RecipeListHeader from './RecipeListHeader/RecipeListHeader';\n\nimport './RecipeList.scss';\n\nexport default function RecipeList({ isLoading, recipes}) {\n\n  return (\n    <div className='recipe-list'>\n      <RecipeListHeader isLoading={isLoading} count={recipes.length} />\n      <ul className=\"list\">\n        {recipes.map((recipe, index) =>\n          <li key={index}>{recipe.name}</li>\n        )}\n      </ul>\n    </div>\n  );\n}","import React, { Component } from 'react';\nimport Axios from 'axios';\nimport Navbar from './components/Navbar/Navbar';\nimport RecipeList from './components/RecipeList/RecipeList';\nimport './App.scss';\n\nexport default class App extends Component {\n  state = {\n    isLoading: true,\n    recipes: []\n  }\n\n  async componentDidMount() {\n    let recipes = [];\n    try {\n      const { data } = await Axios.get('/recipes.json');\n      recipes = data.recipes;\n    } catch (error) {\n      console.error('failed to fetch recipes', error);\n    }\n    this.setState({ isLoading: false, recipes });\n  }\n\n  render() {\n    const { isLoading, recipes } = this.state;\n    return (\n      <div className=\"recipes-crud-app\">\n        <Navbar />\n        <div className=\"content-body\">\n          <h2>Recipes</h2>\n          <p>Take a look at these tasty recipes!</p>\n          <RecipeList isLoading={isLoading} recipes={recipes} />\n        </div>\n      </div>\n    );\n  }\n\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}